{
  "_args": [
    [
      "alt-async@git+https://github.com/altjs/async.git",
      "/home/ian/nosubject_d3"
    ]
  ],
  "_from": "git+https://github.com/altjs/async.git",
  "_id": "alt-async@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/alt-async",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/altjs/async/master/package.json",
      "gitUrl": "git://github.com/altjs/async.git",
      "httpsUrl": "git+https://github.com/altjs/async.git",
      "shortcut": "github:altjs/async",
      "ssh": "git@github.com:altjs/async.git",
      "sshUrl": "git+ssh://git@github.com/altjs/async.git",
      "type": "github"
    },
    "name": "alt-async",
    "raw": "alt-async@git+https://github.com/altjs/async.git",
    "rawSpec": "git+https://github.com/altjs/async.git",
    "scope": null,
    "spec": "git+https://github.com/altjs/async.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/altjs/async.git#073435cfe70fea617d768322ecfefe0ebf64902f",
  "_shasum": "2bdad50ccfcd0a652e5b13e0998667613d625efa",
  "_shrinkwrap": null,
  "_spec": "alt-async@git+https://github.com/altjs/async.git",
  "_where": "/home/ian/nosubject_d3",
  "author": {
    "email": "josh@goatslacker.com",
    "name": "Josh Perez"
  },
  "dependencies": {
    "create-actions": "2.0.0",
    "is-promise": "2.1.0"
  },
  "description": "Next gen Data Sources",
  "devDependencies": {
    "babel-cli": "6.2.0",
    "babel-eslint": "4.1.6",
    "babel-preset-airbnb": "1.0.0",
    "babel-preset-stage-0": "6.1.18",
    "eslint": "1.10.1",
    "eslint-config-airbnb": "1.0.0",
    "eslint-plugin-react": "3.10.0"
  },
  "files": [
    "README.md",
    "lib",
    "src",
    "test"
  ],
  "gitHead": "073435cfe70fea617d768322ecfefe0ebf64902f",
  "license": "MIT",
  "main": "lib/index.js",
  "name": "alt-async",
  "optionalDependencies": {},
  "readme": "# alt-async\n\n## Install\n\n```sh\nnpm install alt-async\n```\n\n## Usage\n\n```js\nimport createAsyncDispatch from 'alt-async'\nimport Alt from 'alt'\n\nconst alt = new Alt()\n\nconst asyncDispatch = createAsyncDispatch(alt)\n\nconst fetchCompany = asyncDispatch('fetchCompany', send => companyId => {\n  return send(null, status => {\n    if (!status.getRequest()) return Promise.resolve(companyId)\n\n    return companyId\n  })\n})\n\nassert(isPromise(fetchCompany(1)))\n```\n\nBreaking it down. `createAsyncDispatch` takes in a dispatcher, any dispatcher.\n`flux` will do but you're probably using `alt` so you pass that in. That'll\nreturn a function which you can then use to create your async functions.\n\nThat function's signature is (namespace: string, value: function, opts: Object)\nyou can pass in certain options such as custom success, failure, begin, and end\nactions; or you can have them auto-generated for you.\n\nThe `value` AKA function that you pass in as the second argument is a curried\nfunction that takes in a single `send` argument. `send` is a function that when\ncalled will execute the async dispatch. `send` takes an `id` for each request,\nand a function callback that is ran. That callback contains a `status` object\nwhich has information about the request.\n\nThis is all probably really confusing so here's some pseudo types...\n\n## API\n\n```js\ncreateAsyncDispatch(dispatcher: { dispatch: function }): asyncDispatch\n\nasyncDispatch(namespace: string, value: function, opts: Object): function\n\nvalue = function (send) {\n  return function (yourArguments, go, here) { }\n}\n\n// optional\nopts = {\n  success: Action\n  failure: Action\n  begin: Action\n  end: Action\n}\n\nsend(id: string, resolver: function)\n\nresolver = function (status) { }\n\nstatus: {\n  state: opts.getState || null\n  isLoading()\n  getRequest()\n  dispatcher\n}\n```\n\n## Retrieving the auto-generated actions\n\n```js\nimport { getActionCreators } from 'alt-async'\n\nconst { success, failure, begin, end } = getActionCreators(theNameSpaceIUsed)\n\n  // in your alt store or whatever...\n  this.bindListeners({\n    handleSuccess: success,\n  })\n```\n\n## But I like classes\n\n```js\nimport { AsyncDispatch } from 'alt-async'\n\nclass CompanyFetcher extends AsyncDispatch {\n  constructor(dispatcher, name) {\n    super(dispatcher, name)\n  }\n\n  fetchCompany(companyId) {\n    return this.send(null, status => {\n      if (!status.getRequest()) return Promise.resolve(companyId)\n\n      return companyId\n    })\n  }\n}\n\nconst companyFetcher = new CompanyFetcher(alt)\n```\n\n## More code\n\n```js\nimport createAsyncDispatch from 'alt-async'\nimport alt from '../alt'\n\nexport default createAsyncDispatch(alt)('createUser', send => (user) => {\n  return send(user.id, (status) => {\n    // dont allow creating same user more than once\n    if (status.isLoading()) return\n\n    return xhr.users.update(user).then(res => res.data)\n  })\n}, {\n  success: UserActions.userSaved,\n  failure: UserActions.userSaveFailed,\n})\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "babel src --out-dir lib --presets airbnb,stage-0",
    "lint": "eslint src",
    "test": "babel-node test/index.js"
  },
  "version": "1.0.0"
}
