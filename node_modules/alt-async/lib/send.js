'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _isPromise = require('is-promise');

var _isPromise2 = _interopRequireDefault(_isPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

exports['default'] = function (data) {
  return function (id, exec) {
    var _data$actions = data.actions;
    var begin = _data$actions.begin;
    var success = _data$actions.success;
    var failure = _data$actions.failure;
    var end = _data$actions.end;


    var beginDispatch = function beginDispatch() {
      return data.dispatcher.dispatch(begin(id));
    };

    var endDispatch = function endDispatch() {
      delete data.store.pending[id];
      if (!data.opts.cache) delete data.store.requests[id];
      data.dispatcher.dispatch(end(id));
    };

    var asyncDispatch = function asyncDispatch(promise) {
      promise.then(beginDispatch, beginDispatch);

      var result = promise.then(function (res) {
        data.dispatcher.dispatch(success(res));
        return res;
      }, function (err) {
        data.dispatcher.dispatch(_extends({}, failure(err), {
          error: true
        }));
        return Promise.reject(err);
      });

      data.store.pending[id] = true;
      data.store.requests[id] = result;

      promise.then(endDispatch, endDispatch);

      return result;
    };

    var status = {
      state: data.opts.getState ? data.opts.getState(data.dispatcher) : null,
      isLoading: function () {
        function isLoading() {
          return data.store.pending.hasOwnProperty(id);
        }

        return isLoading;
      }(),
      getRequest: function () {
        function getRequest() {
          return data.store.requests[id];
        }

        return getRequest;
      }(),
      dispatcher: data.dispatcher
    };

    var value = exec(status);

    // remote request
    if ((0, _isPromise2['default'])(value)) {
      return asyncDispatch(value);

      // a function, handle your own async dispatches
    } else if (typeof value === 'function') {
      return value(asyncDispatch);
    }

    // local value
    return value;
  };
};